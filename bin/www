#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('AppleTea:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*  =============================================================================
     Creates the Chat Room and Media sync by using Socket.io.

    ========================================================================== */
// TODO: Trying to make another file for just socket usages from the server
// require('./socket')();

//Constant media states
const playerStates = {
  PLAYING: 'PLAYING',
  PAUSED: 'PAUSED'
};

// Users
var numUsersConnected = 0;
var numUsersSignedInConnected = 0

// Media player
var ifMediaIsInitialized = false;
var mediaCurrentState = playerStates.PAUSED;
var mediaElapsedTime = 0;

// Queue
var queueList = [];
// Used to see if there are duplicates in the Queue or not
var queueListHashSet = {};

var io = require('socket.io')(server);

io.on('connection', function(socket) {
  console.log("IO connected");
  ++numUsersConnected;

  /*  =============================================================================
      Chat
      ========================================================================== */

  // When client receives a user and sends to server, emits the message to client
  socket.on('From Client: Add user', function(user) {
    console.log(user + " has connected");
    ++numUsersSignedInConnected;

    // we store the username in the socket session for this client
    socket.username = user;
    io.emit("From Server: User joined", {
      username: user
    });
  });

  // When a message is sent, sends the username and their message to the client
  socket.on('From Client: Chat message', function(msg){
    console.log(socket.username + ": "  + msg);
    io.emit('From Server: Chat message', {
      username: socket.username,
      message: msg
    });
  });

  /*  =============================================================================
      Youtube Video
      ========================================================================== */

  // Sets the variables for the server
  socket.on("From Client: Get media states",function(data) {
    socket.emit("From Server: Send media states", {
      initialized: ifMediaIsInitialized,
      state: mediaCurrentState,
      elapsedTime: mediaElapsedTime
    });
  });

  // Sends to all clients to get the elapsed time, prepares to save a random time for server
  socket.on("From Client: Get elapsed time", function(data) {
    socket.broadcast.emit("From Server: Get elapsed time", 1);
  });

  // Saves the last client's elapsed time into the server
  socket.on("From Client: Send elapsed time", function(time) {
    // When the time is 0, does not set the overall mediaElapsedTime to 0
    // Does this because every client is going to send in the time, and the 
    // if (time == 0) {
    //   return;
    // }
    mediaElapsedTime = time;
  });

  // When the user selects a spot on the status play bar, sends all
  // elapsed times for to that specific time.
  socket.on("From Client: Prepares seek to", function(newTime) {
    mediaElapsedTime = newTime;
    io.emit("From Server: Seek to new time", mediaElapsedTime);
  });

  // When the media is first played, sets this to true
  socket.on('From Client: Initialized media', function(data) {
    ifMediaIsInitialized = true;
  });

  // Sets the state to PLAYING and sends to client to play media
  socket.on('From Client: Play media', function(data) {
    mediaCurrentState = playerStates.PLAYING;
    socket.broadcast.emit('From Server: Play media', 0);
  });  

  // Sets the state to PAUSED and sends to client to pause media
  socket.on('From Client: Pause media', function(data) {
    mediaCurrentState = playerStates.PAUSED
    socket.broadcast.emit('From Server: Pause media', 0);
  });

  // Resets the variables of the media
  socket.on('From Client: Reset media states', function(data) {
    ifMediaIsInitialized = false;
    mediaCurrentState = playerStates.PAUSED;
    mediaElapsedTime = 0;
  });

  /*  =============================================================================
      Queue
      ========================================================================== */  
  // Initialize queue
  socket.emit('From Server: Initialize Queue', queueList);

  socket.on('From Client: Push into queue', function(queueEntry) {
    if (queueListHashSet[queueEntry.videoId]) {
      return;
    }
    queueListHashSet[queueEntry.videoId] = true;
    queueList = queueList.concat(queueEntry);
    io.emit('From Server: Push into queue', queueEntry);
  });

  socket.on("From (drag-arrange): Update queue with swaps", function(indices) {
    var newQueueList = [];
    var queueIdString;
    var queueIndexId;
    for (var i = 0; i < queueList.length; ++i) {
      queueIdString = indices[i];
      queueIndexId = parseInt(queueIdString[0]);
      newQueueList = newQueueList.concat(queueList[queueIndexId]);  
    }
    queueList = newQueueList;
    console.log(newQueueList);
    
    io.emit('From Server: Update queue with swaps', newQueueList);
  });

  /*  =============================================================================
      When user disconnects
      ========================================================================== */

  // When a user exits chat room, send to client that user has left
  socket.on('disconnect', function() {
    --numUsersConnected;
    // --numUsersSignedInConnected;

    // If random nonuser is on webpage and sees the chat
    if (!socket.username || socket.username.length === 0) {
      console.log("A user disconnected");
      return;
    }
    
    // An actual user disconnects
    console.log(socket.username + " disconnected");
    io.emit("From Server: User disconnected", {
      username: socket.username
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
